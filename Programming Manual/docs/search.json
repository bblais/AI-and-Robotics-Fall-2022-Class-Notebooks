[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to Programming in Python",
    "section": "",
    "text": "I want to thank the Bryant College AI and Robotics class of Fall 2003 for having the patience with me teaching the course without this guide. Their good work has motivated me to write it. The Bryant University AI and Robotics class of Fall 2004 allowed me to clean up many of the exercises, and make the text more clear. The AI and Robotics class of 2011 motivated me to do many improvements to this document.\nAlso, now I want to thank the AI and Robotics class of Fall 2021 and Ryan Smith for motivating me to translate this to a slightly more modern platform."
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "Introduction to Programming in Python",
    "section": "License",
    "text": "License\nThis website is (and will always be) free to use, and is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 4.0 License."
  },
  {
    "objectID": "01 - Introduction.html",
    "href": "01 - Introduction.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This guide is written to provide an introduction to programming, for those who may have no programming experience. It uses a language/environment called Python (available for free online at www.python.org), although for Windows I prefer the Enthought (www.enthought.com) version. At the time of writing this guide, the current version of Python is 2.7 (with the Enthought version). The guide includes example code and exercises for the reader (with solutions for the instructor). Programming is a skill which can only be learned by doing, so the examples covered later in the guide depend on code written as exercises earlier on. It is therefore important to do all of the exercises along the way."
  },
  {
    "objectID": "01 - Introduction.html#what-is-programming",
    "href": "01 - Introduction.html#what-is-programming",
    "title": "1  Introduction",
    "section": "1.1 What is Programming?",
    "text": "1.1 What is Programming?\nA program is a sequence of instructions telling the computer what to do to accomplish some task. Programming amounts to determining the proper sequence of instructions to accomplish the task, writing these instructions in some language (also called computer code), and testing the results of running the program to make sure that the program is in fact accomplishing the task correctly. When people write these programs for computers to read and execute, difficulties arise because computers read languages very differently than people read languages. There are two main qualities of computers which are important here:\n\nComputers are syntactically picky.\n\nSyntax refers to the rules about about is allowed in a language. For example, the following is not syntactically correct English:\n\nTh.e qui’ck br.own f/ox ju[mps ov]er t=he 1azy blog.\n\nThere are rules in English for the placement of punctuation marks which are seriously violated in this “sentence” (to call it a sentence is to infer that it is syntactically correct). Unless you are really observant, you may not have even noticed the difference between “lazy” and “1azy”, the latter having the digit “1” (one) in front. As humans we can overlook these small syntactical problems and still infer the meaning of the sentence (or most of the meaning, if we refuse to assume we meant “dog” instead of “blog”). The computer cannot do this. Any small syntactical error will cause the program to fail.\n\nComputers are completely literal.\n\nComputer languages have unambiguous rules: each statement has one, and only one, meaning. One example of this we will encounter later is in translating an English sentence like “\\(x\\) is less than \\(y\\) and \\(z\\)” into code. What we mean is “\\(x\\) is less than \\(y\\) and \\(x\\) is also less than \\(z\\)”. Depending on how we translate the code, the computer could interpret the sentence as “(\\(x\\) is less than \\(y\\)) and \\(z\\)” which, in more proper English, would be “\\(z\\) is a true statement and, in addition, \\(x\\) is less than \\(y\\)”. Quite a different meaning than what we intended!\nSolving the syntax problems are the easiest, because the computer will generally tell you where they are (even if the error messages it gives are a bit obtuse). Solving the problems in meaning or what I refer to as the logic of the program, is much harder. It is very common for a programmer to stare at the computer swearing that it is not doing “what I told it to do”, when in fact the computer does exactly what you tell it to do. It may not be doing what you meant it to do. Tracking down these problems, a process known as debugging, takes time and practice.\nLearning to program is like learning to play a musical instrument. You can read all you want, you can watch others do it, but until you program the computer yourself you will never really learn how to do it."
  },
  {
    "objectID": "01 - Introduction.html#what-is-python",
    "href": "01 - Introduction.html#what-is-python",
    "title": "1  Introduction",
    "section": "1.2 What is Python?",
    "text": "1.2 What is Python?\nPython is, as stated in the official introduction,\n\n… an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Python’s elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms.\n\nWhen you run Jupyter you will will be greeted with your webbrowser, with a form-field called a Cell,\n\n\n\nJupyter Cell.\n\n\nEverything in this tutorial which is written in this font is the text displayed in the cell or in a Python program. When I give commands to type on the command line, like the command for help, I will display it like this\n\nprint(\"Hello world!\")\n\nHello world!\n\n\n\n\n\n\n\n\nTip\n\n\n\nUseful keyboard shortcut: Shift-enter: execute (i.e. run) the current cell\n\n\nAt minimum, the Python interpreter is a fancy calculator. For example,\n\n365*454\n\n165710\n\n\n\n43.0/324.0\n\n0.13271604938271606\n\n\n\n2**10\n\n1024\n\n\n\nimport math  # import the math functions\n\n\nmath.sin(5)\n\n-0.9589242746631385\n\n\n\nmath.cos(3.14159)\n\n-0.9999999999964793\n\n\n\n2+2+2+2+2\n\n10\n\n\n\n(3+2)*(6+5)\n\n55\n\n\nAll of the arithmetic operators (+, -, *, /, **) are supported. To use the standard math functions, like the trigonometric functions (sin, cos, tan), one needs to import the math module, with\n    In [7]:import math \nAfter that, one can use them, preceding them with math., like math.sin, math.cos, etc… Or one can be lazy and load all of the math functions all at once,\nfrom math import *  # load all the math functions"
  },
  {
    "objectID": "01 - Introduction.html#your-first-program-hello-world",
    "href": "01 - Introduction.html#your-first-program-hello-world",
    "title": "1  Introduction",
    "section": "1.3 Your First Program: Hello World",
    "text": "1.3 Your First Program: Hello World\nIt is programming tradition to have your first program, in whatever language, simply print out a message saying “Hello, World!”. Although it is perhaps the most basic program to write, in order to get it to run you will already have to be able to do several steps:\n\nEdit the program\nSave it in the proper place\nRun the program\n\nif you’re reading this in a Jupyter notebook, you are already done with two thirds of these steps. All we need is the Shift-Enter to run it.\n\nprint(\"Hello world!\")\n\nHello world!\n\n\n\n1.3.1 Error!\nYou may find the following error happens:\n[11]: prnt(\"hello world\")\n\n\n\nAn Error.\n\n\nthis is because of a typo – check your spelling!\n\n\n1.3.2 A Slightly More Complex Program\n\nprint(\"Hello, World!\")\nprint(\"The result of 2+2 is\",2+2)\n\nHello, World!\nThe result of 2+2 is 4\n\n\n\n\n1.3.3 One More Example Program\n\nimport random\n\nprint(\"Hello, World!\")\na=random.randint(1,10) # random number from 1-10\nb=random.randint(1,10)  # random number from 1-10\n\nc=a+b\n\nprint(\"The result of\",a,\"+\",b,\"=\",c)\n\nHello, World!\nThe result of 6 + 3 = 9\n\n\nTry running it several times! What does it do?"
  },
  {
    "objectID": "02 - Program Structure - Part I.html",
    "href": "02 - Program Structure - Part I.html",
    "title": "Program Structure - Part I",
    "section": "",
    "text": "A very nice way to introduce program is using the turtle module. I make a custom version of this module, but it requires a few extra steps.\n\n# make all of the diagrams appear in the notebook, not in an external window\n%matplotlib inline\nfrom mplturtle import *\n\nThis module is a graphics module that lets you instruct a so-called “turtle”, giving it instructions to go forward, turn right, go backward, etc... while using a pen to draw its path. It’s easiest explained with an example.\n\nreset()  # this line is needed in every cell\n\nforward(50)\nright(90)\nforward(50)\nright(90)\nforward(50)\nright(90)\nforward(50)\n\nanimate()  # you can omit this line if you don't want to see the animation\n\n\n\n\nThe directions tell the turtle to go forward for 50 pixels, turn right 90 degrees, go forward 50 pixels, etc... All the while the pen is down, so that the turtle draws. We can extend this example, by lifting the pen, moving over a little (without drawing), dropping the pen down, and drawing another square.\n\nreset()  # this line is needed in every cell\n\nforward(100)\nright(90)\nforward(100)\nright(90)\nforward(100)\nright(90)\nforward(100)\n\npenup()\nbackward(20)\nright(90)\nforward(20)\npendown()\n\nforward(100)\nright(90)\nforward(100)\nright(90)\nforward(100)\nright(90)\nforward(100)\n\nanimate()  # you can omit this line if you don't want to see the animation\n\n\n\n\n\nExcercise: Make the turtle draw triangles, instead of squares, in the figure above.\n\n\n\nSome of the more useful commands are:\n\nforward(distance) - Move the turtle forward by the specified distance, in the direction the turtle is headed.\nbackward(distance) Move the turtle backward by distance, opposite to the direction the turtle is headed. Do not change the turtle’s heading.\nright(angle) - Turn turtle right by angle units. (Units are by default degrees)\nleft(angle) - Turn turtle left by angle units. (Units are by default degrees)\nsetheading(to_angle) - Set the orientation of the turtle to to_angle.\ngoto(x, y) - Move turtle to an absolute position. If the pen is down, draw line. Do not change the turtle’s orientation.\nposition() - Return the current x,y coordinates of the turtle\nreset() - Reset the screen and the turtle position. Used at the beginning of a script to make sure that running it again won’t overlap the drawings.\ncircle(radius) - Draw a circle of given radius, in a counter-clockwise direction from the current turtle heading. The turtle is not the center of the circle. To get a circle with the center at the turtle, you’ll need to move the turtle over by radius units, draw the circle, and then move back.\npencolor(color) - Set the pen color\npencolor(colorstring) - Set pencolor to colorstring such as \"red\", \"yellow\", or \"#33cc8c\".\npencolor(r, g, b) - Set pencolor to the RGB color represented by r, g, and b. Each of r, g, and b must be in the range 0..1.\n\n\nreset()\n\n# draw a series of circles\n\npencolor(\"green\")\ncircle(100)\n\npencolor(\"red\")\ncircle(50)\n\npencolor(\"blue\")\ncircle(25)\n\n\n\n\n\nreset()\n\n# draw a series of circles centered at 0,0\npenup()\nright(90)\nforward(50)\nleft(90)\npendown()\n\ncircle(100)\n\npenup()\nleft(90)\nforward(25)\nright(90)\npendown()\n\ncircle(50)\n\npenup()\nleft(90)\nforward(12.5)\nright(90)\npendown()\n\ncircle(25)"
  },
  {
    "objectID": "02 - Program Structure - Part I.html#variables",
    "href": "02 - Program Structure - Part I.html#variables",
    "title": "Program Structure - Part I",
    "section": "Variables",
    "text": "Variables\nAll data in a program is stored in variables, which are just memory blocks with names. The names can be any sequence of letters, underscores (_), or numbers as long as the name starts with a letter. bob, frank4, and a_5_b are all legitimate variable names. Usually you choose names that make sense for your particular application, like mysum, total, or chicken3. In Python, everything is case-sensitive. This means that bob is a different variable than Bob, BoB, or boB (which are all different from each other).\nTo assign a value (or values, as we shall see later) into a variable one uses the assignment operator, namely the “=” sign.\n\na=5\n\n\na*600\n\n3000\n\n\nIn the last line I used a (which was defined to be 5 in the previous line) in an expression. Variables can be used just as numbers in any expression in Python.\n\na=30\nb=40\nimport math   # import the math functions\nc=math.sqrt(a**2+b**2)\nprint(c)\n\n50.0\n\n\nwhere math.sqrt is a function that takes the square root of the numbers.\nOne can even use a variable in an expression which sets its own value.\n\na=6\nb=7\n\n\na=a+b\nprint(a)\n\n13\n\n\nThis demonstrates the meaning of the symbol = in Python. It does not mean the same thing that it means in standard algebra. It does not mean equivalence, it means assign. a=5 means take the right side (5) and assign it to the variable on the left side (a). With a=6 and b=7, then the statement a=a+b means take the right side (a+b which evaluates to 13) and assign it to the variable on the left side (a). Now a has the new value of 13.\nSome of the uses of variables is for convenience, readability, consistency, and calculation. Let’s consider our square program from Listing [list:square] on page . There are two obvious issues with it. One is that we’ve repeated ourselves several times. There is an easier way to make use of that, which we’ll discuss later. The other issue is that the same number, the side of the square, is used four times. If we wanted to draw a square of a different size we’d have to change all four numbers. Because we have to make four changes, instead of one, it leads to more possible errors (i.e. typos). A variable can change that.\n\nComments\nIn the code, notice the use of comments following the # character. Python ignores anything following this characters, which allows us to document the code making it easier for others to read. Get in the habit of putting in comments now, because the biggest use of comments is to remind yourself about how a piece of code works, several weeks after it has been written.\n\n\nDrawing square with variables\n\nreset()\n\nsize=90\n\n# draw the square\nforward(size)\nright(90)\nforward(size)\nright(90)\nforward(size)\nright(90)\nforward(size)"
  },
  {
    "objectID": "02 - Program Structure - Part I.html#user-input",
    "href": "02 - Program Structure - Part I.html#user-input",
    "title": "Program Structure - Part I",
    "section": "User Input",
    "text": "User Input\nAny good program asks for input from the user. The input function gets input from the keyboard, asked at the command line. This lets the user type in values, which can be different each time the program is run. There will be many cases where these values may be inappropriate, and possibly cause the program to crash. Good program writing will include taking care of these cases as well. The following example lets the user enter the size of a square to draw. One thing to note is that the input function returns a string (like “hello”) and needs to be converted to a number to be used an a calculation.\n\nreset()\n\nsize=input('What size do you want the square?')\nsize=int(size)\n\n\n# draw the square\nforward(size)\nright(90)\nforward(size)\nright(90)\nforward(size)\nright(90)\nforward(size)\n\nWhat size do you want the square? 10\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nWrite a program to ask the user for the size, and the x and y coordinates of the center of a circle, and draw it.\n\n\nThe following example lets the computer determine a number you have chosen, given the answers to a couple of simple questions.\n\n# simple guess the number game\n# \n\nimport time   # the time module includes the sleep function\n\nprint('Please think of a number between 10 and 99.')\n\nsum_digits=input('What is the sum of the digits of your number? ')\nsum_digits=int(sum_digits)  # convert the input to an integer\n\ndiff_digits=input('What is the difference of the digits of your number (first digit - second digit)? ')\ndiff_digits=int(diff_digits)  # convert the input to an integer\n\nprint('Let me think a moment...')\n\ntime.sleep(2) # delay for 2 seconds\n\n# apply the equation to get the guess from the info\nguess=10*(sum_digits+diff_digits)//2+(sum_digits-diff_digits)//2\n\nprint('Your number was ',guess,', right?')\n\nPlease think of a number between 10 and 99.\n\n\nWhat is the sum of the digits of your number?  3\nWhat is the difference of the digits of your number (first digit - second digit)?  -1\n\n\nLet me think a moment...\nYour number was  12 , right?\n\n\nThe following example computes the amount of interest earned after one year, given an initial principal and an annual interest rate.\n\n# get the initial values\nprincipal=input('What is the initial principal? ')\nprincipal=float(principal)  # convert to a real number\n\nrate=input('What is the annual interest rate? ')\nrate=float(rate)  # convert to a real number\n\nprint('The original principal is $',principal)\nprint('The interest rate is ',rate)\n\ninterest=principal*rate # calculate the interest\nprint('The total interest after 1 year is $',interest)\n\nprincipal=principal+interest\nprint('The new principal after 1 year is $',principal)\n\nWhat is the initial principal?  100\nWhat is the annual interest rate?  .5\n\n\nThe original principal is $ 100.0\nThe interest rate is  0.5\nThe total interest after 1 year is $ 50.0\nThe new principal after 1 year is $ 150.0\n\n\nNote how the use of relevant variable names makes the code much easier to read."
  },
  {
    "objectID": "02.01 Programming Structure - If-Then Conditionals.html",
    "href": "02.01 Programming Structure - If-Then Conditionals.html",
    "title": "2  Branching: If-statements",
    "section": "",
    "text": "Programs execute one line at a time, in consecutive order. This sequential program flow can be modified using two types of programing structures: branches and loops. We consider branches in this section, and loops in the next section.\nThe form of a simple branch is the following:\nwhere I am using ALL CAPITAL LETTERS to denote something which stands for code that you would need to write, but is not code itself. The colon (:) is necessary at the end of the if line, or a syntax error will result. A branch, or if-statement, is interpreted in the following way: only execute the STATEMENTS if the CONDITION is true. For example, here is a program which swaps the two values of x and y only if x is originally larger than y. The result is that the final value of x will always be smaller, or equal to, the final value of y.\nSay we input the values of 5 for x and 10 for y.\nAs the program progresses, it gets to the line if x>y: which is calculated to be if 5>10: or if False: since 5 is not greater than 10. Because the condition is false, the statements after the if which are indented by 4 spaces will not be executed, and the program continues with the next line of code after the indented lines. If, however, we input the values of 15 for x and 10 for y.\nThe values get swapped!"
  },
  {
    "objectID": "02.01 Programming Structure - If-Then Conditionals.html#comment-on-boolean-variables",
    "href": "02.01 Programming Structure - If-Then Conditionals.html#comment-on-boolean-variables",
    "title": "2  Branching: If-statements",
    "section": "2.1 Comment on Boolean variables",
    "text": "2.1 Comment on Boolean variables\nA boolean variable is one that has a value of true or false, instead of a number. In Python those values are True and False (note the capital first letter). Thus, each of the following if-statements will print a message to the screen\n    if True:\n        print 'this line gets executed'\n        \n    if 3>2:\n        print 'this line gets executed'\n\n    printit= (3>2)  # set the variable printit to True\n\n    if printit:\n        print 'this line gets executed'\nwhereas the following if-statements will print nothing\n    if False:\n        print 'this line does not get executed'\n        \n    if 50<10:\n        print 'this line does not get executed'\n\n    printit= (34>57)  # set the variable printit to False\n\n    if printit:\n        print 'this line does not get executed'\nThe CONDITION in an if-statement must reduce to a true or false value for it to have any meaning."
  },
  {
    "objectID": "02.01 Programming Structure - If-Then Conditionals.html#boolean-operators",
    "href": "02.01 Programming Structure - If-Then Conditionals.html#boolean-operators",
    "title": "2  Branching: If-statements",
    "section": "2.2 Boolean Operators",
    "text": "2.2 Boolean Operators\nThe following are the allowed boolean operators.\n\n\n\noperator\nmeaning\n\n\n\n\n==\nequal to\n\n\n>\ngreater-than\n\n\n<\nless-than\n\n\n>=\ngreater-than or equal to\n\n\n<=\nless-than or equal to\n\n\nnot\nnot (negation)\n\n\n!=\nnot equal to\n\n\nand\nand\n\n\nor\nor\n\n\n\nA very common mistake for beginning programmers is to use the assignment = instead of the equality == in a CONDITION of an if-statement. Whenever you are testing if two values are equal in if-statement (or a while-loop, which we discuss later), you must use ==. For example, the following code fragment will print out a message\n    a=5\n    b=5\n    if a==b:\n        print 'a is equal to b'\nbut the following code fragment will not\n    a=5\n    b=6 # <--- b is not equal to a\n    if a==b:\n        print 'a is equal to b'\nIf one wanted to test to see if x is bigger than both y and z, one would write\n    if x>y and x<z:\n        print x is bigger than both y and z\nTranslating back to English we have “x is greater than y and x is also greater than z”. What would have happened if we had written instead, x > y and z? If you test it yourself you will find that it prints the message whenever z is not equal to zero, and x is greater than y! Why is that? As stated in the beginning, computers are very literal, and follow a strict syntax. Python is interpreting x > y and z as (x>y) and (z) where z is seen as a boolean (true/false) variable even though we didn’t mean it to. In this sense, anything non-zero is true, so Python is interpreting x > y and z as true whenever z is not equal to zero, and x is greater than y.\nAlthough it is not always necessary, it is a very good habit to put parentheses around any operation of two variables, like (x>y) or ( (x>y) and (x>z) ). It may be a bit more typing, but it can save you hours in debugging logic that is hard to see otherwise."
  },
  {
    "objectID": "02.01 Programming Structure - If-Then Conditionals.html#if-elif-and-else",
    "href": "02.01 Programming Structure - If-Then Conditionals.html#if-elif-and-else",
    "title": "2  Branching: If-statements",
    "section": "2.3 if, elif, and else",
    "text": "2.3 if, elif, and else\nThe if-statement has a more general structure which is very useful. It looks like\n    if CONDITION1:\n        STATEMENTS  # these statements run if CONDITION1 is true\n    elif CONDITION2:\n        STATEMENTS  # these statements run if CONDITION1 is false, and \n                    #                         CONDITION2 is true\n    elif CONDITION3:\n        STATEMENTS  # these statements run if CONDITION1 is false, and \n                    #                         CONDITION2 is false, and\n                    #                         CONDITION3 is true\n    else:\n        STATEMENTS  % these statements run if all of the CONDITIONS are false\nYou can have as many or as few (even zero) elif clauses, and either include or not the final else clause. This structure lets you set up different actions for many different incoming possibilities. The colon (:) needs to be at the end of each line which starts a block of code, like if, elif, and else.\nFor example, the following program asks the user if she likes bananas, and responds differently given the user’s response. Although we haven’t used strings so far, the example is fairly self-explanatory.\n\n\nresponse=input('Do you like Bananas? ');\n\nif response=='yes':\n    print ('I like Bananas too!')\nelif response=='no':\n    print ('I dislike Bananas too!')\nelse:\n    print ('I did not understand what you wrote.')\n\n\nDo you like Bananas?  yes\n\n\nI like Bananas too!\n\n\n\n\n\n\n\n\nExercise\n\n\n\nMake a turtle program to ask the user what shape to draw, and draw it. You should have at least 3 different shape choices."
  },
  {
    "objectID": "02.02 Programming Structure - Loops.html",
    "href": "02.02 Programming Structure - Loops.html",
    "title": "3  Loops",
    "section": "",
    "text": "A loop is used to repeat a set of statements many times, usually until some condition is met. One loop structure we will introduce now is the while-loop. It has the form\nThis structure works like a repeating if-statement: if CONDITION is true, then the STATEMENTS are executed. In a while-loop, however, the program flow returns back to the while (CONDITION) line and the CONDITION is tested again. If it is still true, then the STATEMENTS will be executed again. This will repeat until such time as CONDITION is tested and comes up false. Then program flow jumps to the line following the entire while clause. The following is an example that prints out the numbers 1, 2, 3, 4 and 5.\nThe program flow in this example is as follows. The first line to be executed is x=1 which sets the value of x to 1. Then the program tests to see if x is less than or equal to five, which is true, so the lines within the while-loop are executed. The first line displays x, which prints a “1” on the screen, and the next line adds one to x, yielding the answer 2, and assigns this new value to x. The program then jumps back to the while statement and tests x again to see if it is less than or equal to five, which is again true. Again, the value of x is printed to the screen, this time it is “2”, and again x is incremented by 1, yielding 3. The while tests x again at 3, 4, and 5, passing each time and displaying the result. When x passes with a value of 5, the two lines are executed, displaying “5” and incrementing x to 6. The while tests x to see if it is less than or equal to 5, which is false now, and skips to the indented lines in the while block. The next line to be executed displays “Done!” and the program ends. Notice that the last value of x is 6, but the last value to be displayed is 5.\nWe can extend the interest program written in the Section on Variables to use a while-loop, and calculate the accumulated interest over the course of many years.\nOne technique for using a while loop is to repeat a question if the user gave a bad answer. For example, the following code fragment keeps the user from entering a negative principal value, but allows the user to retype a valid answer.\nIt is necessary for the initial value of principal to be less than zero, so that the statements within the while-loop will execute the first time. If we forgot the principal=-1 line, we’d receive an error like:\nIf we had set principal to a positive value, then the while-loop would have tested false, and skipped all of the statements in the while-loop. The principal=-1 line gets us into the while loop. After that, the user input will keep us there until the user enters a valid, positive (or zero) principal."
  },
  {
    "objectID": "02.02 Programming Structure - Loops.html#the-for-loop",
    "href": "02.02 Programming Structure - Loops.html#the-for-loop",
    "title": "3  Loops",
    "section": "3.1 The for-loop",
    "text": "3.1 The for-loop\nNinety percent of loops one writes, repeat a specified number of times, like the first example above, which repeats 5 times. Because of this, there is a more convenient form of a loop for this purpose, called a for-loop. The following two pieces of code do the same thing:\n\n# while-loop\nx=0\nwhile x<10:\n    print(x)\n    x=x+1\n\nprint('Done!')\n\n# do the same thing with a for-loop\n\nfor x in range(10):\n    print(x)\n    \nprint('Done!')\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\nDone!\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\nDone!\n\n\nThe for-loop moves through each value of range(10), which goes from 0 to 9 (not 1 to 10), which repeats the statements in the for-loop 10 times. Both the setting of the initial value, and the incrementing, is done automatically.\nThe following example is the same as the Square program earlier, but uses a for-loop to reduce some of the redundancy.\n\n# remember to import the turtle functions and the pylab inline from before if you're running just this cell\nreset()\n\nsize=70\nfor side in range(4):\n    forward(size)\n    right(90)\n\n\n\n\nAnother example with a square, with some extra variables. What do these variables do?\n\nreset()\n\nnumber_of_sides=4\nangle=360/number_of_sides\nsize=70\n\nfor side in range(number_of_sides):\n    forward(size)\n    right(angle)"
  },
  {
    "objectID": "02.03 Programming Structure - Functions.html",
    "href": "02.03 Programming Structure - Functions.html",
    "title": "4  Functions",
    "section": "",
    "text": "Functions are the basis of programming: all of the commands that you use are functions. So, what is a function?\nThink of a function as a box, with information that you put into it, and information that it sends out, but you don’t know how the insides of the box work. When you call the math.cos function, for example, you give it an angle, and it returns a number between -1 and 1. You don’t know how Python actually implements math.cos.\nWhen organizing code, you break the code up into three types of functions: - functions that only display information (and return nothing) - functions that only ask for user input (and return it)\nWhen I use the word “return” here, think again of the cos function. If I call:\nyou will notice that nothing is displayed. The value of y is now, but cos didn’t print this value to the screen, it returned the value so that y could be assigned to that value.\nAs a diagram, I am going to use the following:\nFor example, the \\(\\sin\\) function would be written like:\nLet’s rewrite the interest program from earlier, in terms of functions. Looking at the code above, we have a couple of parts which input a positive number from the user, and something which calculates the principal given the original princial, rate, and year. A couple of useful functions would then be:\nIn Python these functions look like\nLet’s step through input_positive_number function to see what is going on. In the main code there is a line\nThis line calls the function input_positive_number, and gets to the first line of that function which is:\nThis says “assign the value of ’What is the initial principal? ’ to the variable prompt” The variable prompt is local to this function, which means that it cannot be seen from the outside, and will not conflict with any other variable called prompt in any other function or script. For example, if I had done:\nthen the displayed string would be hello, because this script doesn’t see the internal prompt variable in the input_positive_number function.\nIn a function, the order of the input arguments is what assigns data to a variable, not the variable names themselves. Variable names are not absolute in this case. For example, the following code…"
  },
  {
    "objectID": "02.03 Programming Structure - Functions.html#input-and-output-arguments-versus-input-and-print-commands",
    "href": "02.03 Programming Structure - Functions.html#input-and-output-arguments-versus-input-and-print-commands",
    "title": "4  Functions",
    "section": "4.1 Input and Output Arguments versus input and print Commands",
    "text": "4.1 Input and Output Arguments versus input and print Commands\nBeginning programmers often get confused about the difference between displaying a result and returning a result. For example, look at the following two functions:\n\ndef squared_print(x):\n    y=x*x\n    print(y)\n\ndef squared_return(x):\n    y=x*x\n    return y\n\nIn the first case, squared_print, the result of the square is displayed on the screen. The caller of the function might run it like\n>>> squared_print(3)\nand “9” is displayed on the screen. Then what? That’s pretty much the extent of the usefulness of this function (which is not particularly useful).\nThe second case, squared_return, assigns the variable, y, to the value of x*x, and returns it. From there, the caller of the function can choose to display it, or not, or use it in a further calculation.\n\nsquared_print(3)\n\n9\n\n\n\nsquared_return(3)\n\n9\n\n\n\nz=squared_return(3)\nz+5\n\n14\n\n\n\na=9\nb=12\nc=sqrt(squared_return(a)+squared_return(b))\nc\n\n15.0\n\n\nReturned values are much more useful than displayed values.\nAs a side-note, what happens if I try the calculation with the squared_print function? I get an error.\n\nz=squared_print(3)\nz+5\n\n9\n\n\nTypeError: unsupported operand type(s) for +: 'NoneType' and 'int'\n\n\n\nprint(z)\n\nNone\n\n\nso z is None, which isn’t a number or anything. When there is no return in a function, the function actually does return something – it is called None. Not particularly useful."
  },
  {
    "objectID": "02.03 Programming Structure - Functions.html#more-turtle-examples",
    "href": "02.03 Programming Structure - Functions.html#more-turtle-examples",
    "title": "4  Functions",
    "section": "4.2 More Turtle Examples",
    "text": "4.2 More Turtle Examples\nThe easiest example of a use of a function is to bundle together a number of commands into a convenient shortcut. Consider the following example to draw a square. Here the function square draws a square of a given size. When the command square(100) is done, then inside the function the variable size is assigned to 100 and then used throughout the rest of the function.\n\nreset()\n\ndef square(size):\n    for side in range(4):\n        forward(size)\n        right(90)\n        \npencolor(\"blue\")\nsquare(100)\n\npenup()\nforward(20)\nright(90)\nforward(20)\nleft(90)\npendown()\n\npencolor(\"red\")\nsquare(100)\n\n\n\n\nA more complex example is the following, which uses the function, if-then structure, for-loop structure and random numbers to draw an interesting, somewhat random, pattern. The function randint returns a random number between the two numbers given. For example, randint(1,10) returns a random number between 1 and 10 inclusive. Notice how the alternating red/blue patterns is done. Calling pencolor() with nothing inside returns the current color of the pen. We check to see if the current color is blue, and if it is, we set it to red. Otherwise we set it to blue.\n\nfrom random import randint\n\nreset()\n\ndef square(sz):\n    for side in range(4):\n        forward(sz)\n        right(90)\n        \npencolor(\"blue\")\n\nfor i in range(100):\n\n    size=randint(10,100)\n    square(size)\n    \n    move_over=randint(-30,30)\n    move_up=randint(-30,30)\n    \n    penup()\n    forward(move_over)\n    right(90)\n    forward(move_up)\n    left(90)\n    pendown()\n    \n    if pencolor()=='blue':\n        pencolor('red')\n    else:\n        pencolor('blue')\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\n\n\nMultiple Houses\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\n\n\nCircles and Squares\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\n\n\nOut and Back and Angles\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\n\n\nLooping patterns\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nMake a function to draw a polygon. It should be given the number of sides, and the length of the shape. For example, if the number of sides is, say, 3 then it should draw a triangle. If it’s 4 then a square, 5 a pentagon, etc…\n\n\n\n4.2.1 Local Variables\nVariables assigned within a function have no connection to any variables outside of the function, even those of the same name. The variable is considered local to the function, and is destroyed when the function ends. The only way to pass information out of a function is through the return statement.\nInput arguments function just like local variables: changes in their value do not affect anything outside of the function itself. Some examples will help elucidate the properties of local variables. Consider the following functions:\n\ndef localvars_second():\n    \n    a=10\n    a=a+1\n    \n    print(\"second a is \",a)\n\n\ndef localvars_third(b):\n\n    b=b+1\n    a=2*b\n    \n    print(\"third a is \",a)\n\n\ndef localvars_fourth(c,e):\n\n    print(\"beginning of fourth c is \",c)\n    print(\"beginning of fourth e is \",e)\n\n    a=c*c\n    d=a+1\n    d=d-2\n    \n    c=0\n    e=-1\n    \n    \n    print(\"fourth a is \",a)\n    print(\"fourth c is \",c)\n    print(\"fourth e is \",e)\n    print(\"fourth d is \",d)\n\n    return d\n\n\ndef localvars_first():\n\n    a=5\n    d=1\n    \n    localvars_second()\n    print(\"first a is \",a)\n    \n    localvars_third(a)\n    print(\"first a is \",a)\n    \n    y=localvars_fourth(a,2*a)\n    print(\"first a is \",a)\n    print(\"first d is \",d)\n    print(\"first y is \",y)\n\n\nlocalvars_first()\n\nsecond a is  11\nfirst a is  5\nthird a is  12\nfirst a is  5\nbeginning of fourth c is  5\nbeginning of fourth e is  10\nfourth a is  25\nfourth c is  0\nfourth e is  -1\nfourth d is  24\nfirst a is  5\nfirst d is  1\nfirst y is  24\n\n\nThe logic of the output is as follows. The function localvars_first sets the value of a to be 5, and then the value of d to be 1. It then calls localvars_second, which sets its own variable a to 10, and then adds one to that, yielding 11. This does not affect the value of a in localvars_first.\nThe function localvars_first then calls localvars_third, passing it the value of a, which is still 5. This value is copied to the variable b in localvars_third, because we called the first input argument b. Now b will act like a local variable, and any changes to it will not be seen outside of the localvars_third function. Again, localvars_third sets its own variable a.\nThe function localvars_first then calls localvars_fourth, passing it two values, one of which is the value of a, which is still 5, and the other is the value of 2*a, which is 10. These are copied to the local variables in localvars_fourth, c and e respectively. Changes to these variables, or local versions of a, do not affect the value of a in localvars_first. The value of d, which is returned from localvars_fourth, gets copied to y in localvars_first.\n\n\n4.2.2 Some Useful Python Functions\nIn this section we summarize a few useful Python functions.\n\nmath.floor and math.ceil: These functions take a real number and return another real number, closest to an integer. floor drops anything after the decimal, rounding down always. ceil rounds up always.\n\n\nimport math\na=6.3425\nb=2.786\nmath.floor(a)\n\n6\n\n\n\nmath.ceil(a)\n\n7\n\n\n\nrandom.random: This function returns a random number between 0 and 1, not including 0 or 1.\n\n\nimport random\nrandom.random()\n\n0.9503297401425543\n\n\n\nrandom.random()\n\n0.6183851795278218\n\n\nIf you want to make a random number, say, from 1 to 10, then you can use the random.randint function:\n\nimport random\nrandom.randint(1,10)\n\n9\n\n\n\nrandom.randint(1,10)\n\n6\n\n\n\nrandom.randint(1,10)\n\n9"
  },
  {
    "objectID": "03.01 - Program Design - Guidelines.html",
    "href": "03.01 - Program Design - Guidelines.html",
    "title": "Program Design",
    "section": "",
    "text": "You now know enough Python syntax to do almost any program. There are other parts of Python syntax that we will cover later, but it is important to pause and consider how programs are designed. A programmer never starts by just sitting at a keyboard and typing. There are several key steps before any code is written, or the programmer will waste hours, even days, with false starts and debugging issues.\nA programmer starts with a problem, and usually some idea of how to solve it. The task of the programmer is to translate this idea into a step-by-step set of instructions to solve the problem. The basic approach is the following - Break up the problem into smaller pieces, which can be tested individually. This is usually done by writing the program like a recipe with parts of the problem in English. You may have things like “do the following 5 times” or “calculate this value from the other values given”. These will be fleshed out later in the process. You should have a full recipe for the problem, written out on paper, well before you start to type. - Attack each smaller piece as a separate program, breaking into smaller pieces as necessary. - You should find that your more refined recipe consists of a set of functions, each of which is small and does a very specific thing. - Desk-check the recipe to see that it really works. This means stepping through your recipe, on paper, as if you were a computer, not taking anything for granted, and seeing that it works. You should also desk-check what your functions do when given improper input. The desk-check is a very important step, and is often skipped by beginning programmers who are in a rush to get to the keyboard. It also is a step that, when skipped, wastes more time than missing almost any other step! - Identify what information each function needs to get from the main program. These will be your input arguments for that function. Identify what information each function needs to return to the main program. These will be its output arguments. - You then write each function in proper code, and test it individually. This is the important thing: do not trust that a function works without testing it. Put in bad values, and make sure it behaves well. Test it over the entire range of possible input values, especially values like zero or the maximum valid value, to make sure the function is robust. - When you start putting the functions together to match your recipe, do it one function at a time, and test it. If you type the whole recipe out at once, and it doesn’t work, then you don’t where it is failing, and it will take you a long time to figure out where it is failing. Testing after the addition of any amount of code saves you time in the long run.\nHere are some guidelines that help with programming and debugging.\n\nOther than your main function, all other functions should only return values and not print things to the screen unless that is their only job. Let the main function print out the values if it needs to, or not if it doesn’t need to. A function is much less useful if it prints values to the screen itself.\n90% of debugging is preventative. If you are careful, test every bit of code you add (no matter how small or insignificant) at the time you add it, and follow the guidelines below you will avoid many pitfalls.\nName variables consistently. If you use use variables like interestrate, interest_rate, InterestRate, etc. then make all variables like that. You don’t want to use InterestRate in one place and mortgage_rate somewhere else. It gets confusing!\nIf you get an error, determine what the error is before you try to change your code to fix it. Although often terse and difficult to read, the error messages do tell you what is wrong (although it takes some practice to interpret them).\nTest each function separately, and over a wide range of possible input values. You can only trust a program if each function is working perfectly.\nDo not try to write the entire program before testing. This becomes a nightmare fast! Break things into pieces, and test each piece, no matter how trivial it seems.\nWhen you really get stuck, have someone else look at your code. Seeing with different eyes often allows someone to see errors that you’ve been staring at (and missing) for an hour.\nWhen trying to determine why something is going wrong, put in a lot of print statements to confirm that the variables have the values you think they do. Do this even in cases where it is obvious that the variable is correct, because sometimes the obvious is not true.\nAnd finally, remember the golden rule of debugging: If you are absolutely sure that everything in your program is right, and if it still doesn’t work, then one of the things that you are absolutely sure of is wrong."
  },
  {
    "objectID": "03.02 Program Design - Tank Wars.html",
    "href": "03.02 Program Design - Tank Wars.html",
    "title": "5  Tank Wars: An Extended Example",
    "section": "",
    "text": "As an example, I will step through the development and coding process for a game of tank wars. The rules of the game are as follows:"
  },
  {
    "objectID": "03.02 Program Design - Tank Wars.html#writing-the-recipe",
    "href": "03.02 Program Design - Tank Wars.html#writing-the-recipe",
    "title": "5  Tank Wars: An Extended Example",
    "section": "5.1 Writing the Recipe",
    "text": "5.1 Writing the Recipe\nSo how do we begin to write such a program? We first write a recipe for the program, mostly in English. Something like:\n\nSet Wind Speed\nWhile No One Has Won\n\nGet Each Player’s Angle and Speed\nGet Where Each Shot Landed\nDisplay Where Each Shot Landed\nDetermine Who Has Been Destroyed, If Anyone\nDetermine Who Has Won, If Anyone\n\nDisplay Who Won\n\nSome of these parts will translate easily into Python code, while others will take some steps. Now let’s go to the next stage of refinement. Lines like Set Wind Speed can be translated directly as wind_speed=5;\nThe while-loop will look something like\nno_one_has_won=True\nwhile (no_one_has_won):\n\n    STUFF HERE.  WHEN SOMEONE WINS, OR A STALEMATE, THEN \n    WE WILL WRITE no_one_has_won=False\nThis is a very common structure for a while-loop, where you have a variable which starts off true, and then is set to false when you want to not continue repeating the while-loop."
  },
  {
    "objectID": "03.02 Program Design - Tank Wars.html#designing-the-functions",
    "href": "03.02 Program Design - Tank Wars.html#designing-the-functions",
    "title": "5  Tank Wars: An Extended Example",
    "section": "5.2 Designing the Functions",
    "text": "5.2 Designing the Functions\nThe line Get Each Player’s Angle and Speed should be a set of two statements Get Player 1’s Angle and Speed and Get Player 2’s Angle and Speed. If we use a single function for this, we would want something simply like get_angle_and_speed. What information does this function need to be given? Just the player’s number, 1 or 2. What information does this function return? Two numbers: the angle and the speed. So we should have something like\n\n\n\nimage.png\n\n\n\ndef get_angle_and_speed(player_number):\n\n    print('Player ',player_number)\n    angle=input('  Enter your Angle of Elevation: ')\n    speed=input('  Enter your Angle of Speed: ')\n\n    return angle,speed\n\nRight now this doesn’t check to see if the velocity is above zero, or the elevation is between 0 and 90 degrees, but this can be added easily.\n\ndef get_angle_and_speed(player_number):\n\n    print('Player ',player_number)\n    angle=float(input('Enter your Angle of Elevation: '))\n\n    if (angle<0) or (angle>90): # illegal angles\n        raise ValueError(\"Illegal Angle Given\")\n\n    speed=float(input('Enter your Angle of Speed: '))\n\n    if speed<0:\n        raise ValueError(\"Illegal Speed Given\")\n\n\n    return angle,speed\n\nNow we test this function, using several values of the player number, and also testing the illegal values of angles and speeds.\n\nangle1,speed1=get_angle_and_speed(1)\n\nPlayer  1\n\n\nEnter your Angle of Elevation:  45\nEnter your Angle of Speed:  100\n\n\n\nangle1,speed1\n\n(45.0, 100.0)\n\n\n\nangle2,speed2=get_angle_and_speed(2)\n\nPlayer  2\n\n\nEnter your Angle of Elevation:  145\n\n\nValueError: Illegal Angle Given\n\n\n\nangle2,speed2=get_angle_and_speed(2)\n\nPlayer  2\n\n\nEnter your Angle of Elevation:  45\nEnter your Angle of Speed:  50\n\n\n\nangle2,speed2=get_angle_and_speed(2)\n\nPlayer  2\n\n\nEnter your Angle of Elevation:  45\nEnter your Angle of Speed:  -50\n\n\nValueError: Illegal Speed Given\n\n\nContinuing our program, we need a function to Get Where Each Shot Landed. Again, we split this into Get Where Player 1’s Shot Landed and Get Where Player 2’s Shot Landed, again as a single function. Since this function does not need to print anything, it doesn’t need to know who the player is. It just needs the angle of elevation, the shot speed, and the wind speed. It will then return the distance, so it should look like\n\n\n\nimage.png\n\n\nNow, in Python, all trigonometric functions are given in radians, not degrees. We will have to translate from degrees to radians to use the equation for the distance. This calls for another function, that is given an angle in degrees and returns the value in radians.\n\n\n\nimage.png\n\n\n\ndef radians(d):\n    r=d*3.1415926535897932/180\n    return r\n\nTest this function knowing that 0 degrees is 0 radians, 180 degrees is \\(\\pi\\) radians, and 360 degrees is \\(2\\pi\\) radians.\n\nradians(0)\n\n0.0\n\n\n\nradians(180)\n\n3.141592653589793\n\n\n\nradians(360)\n\n6.283185307179586\n\n\nNow we are ready to make our get_shot_distance function.\n\ndef get_shot_distance(angle,shot_speed,wind_speed):\n    from math import sin\n    \n    angle=radians(angle)\n    distance=(shot_speed**2*sin(2*angle)+2*wind_speed*shot_speed*sin(angle))/10\n\n    return distance\n\nTo test this function, we should desk-check a few values. We can also do a couple of cases like shooting straight up with no wind, shooting straight up with a wind, shooting at an angle of 0, or a velocity of 0.\n\nget_shot_distance(90,20,0) # really small value (effectively zero)\n\n4.898587196589413e-15\n\n\n\nget_shot_distance(90,20,10) # wind pushes the shot forward\n\n40.00000000000001\n\n\n\nget_shot_distance(90,20,-10)  # wind pushes the shot backward\n\n-39.99999999999999\n\n\n\nget_shot_distance(0,20,10)  # hits the ground immediately\n\n0.0\n\n\n\nget_shot_distance(45,0,10) # hits the ground immediately\n\n0.0\n\n\nOur program now looks like\n    wind_speed=5\n\n    no_one_has_won=True\n    while no_one_has_won:\n\n        angle1,speed1=get_angle_and_speed(1)\n        angle2,speed2=get_angle_and_speed(2)\n        \n        distance1=get_shot_distance(angle1,speed1,wind_speed)\n        distance2=get_shot_distance(angle2,speed2,-wind_speed)\n        \n        MORE STUFF  \nNotice that we used -wind_speed for player 2, because it experiences the opposite wind pattern. Now we have to display these distances, using print statements, and determine a winner. The function to determine a winner should take the two distance values, and return one of 4 values. 0: no one hit anything, 1: player one won, 2: player two won, 3: both destroyed.\n\n\n\nimage.png\n\n\n\ndef get_winning_player(distance1,distance2):\n\n    tank_1_hit=(distance2>=990) and (distance2<=1010)\n    tank_2_hit=(distance1>=990) and (distance1<=1010)\n\n    if tank_1_hit and tank_2_hit:\n        winning_player=3  # stalemate\n    elif tank_1_hit: # only tank 1 hit\n        winning_player=2\n    elif tank_2_hit: # only tank 2 hit\n        winning_player=1\n    else: # no tanks hit\n        winning_player=0\n\n    return winning_player\n\nAgain we test with a range of values, especially those on the extremes (990 and 1010).\n\nget_winning_player(500,500)\n\n0\n\n\n\nget_winning_player(1001,500)\n\n1\n\n\n\nget_winning_player(1010,500)\n\n1\n\n\n\nget_winning_player(1010,500)\n\n1\n\n\n\nget_winning_player(1011,990)\n\n2\n\n\n\nget_winning_player(1010,990)\n\n3"
  },
  {
    "objectID": "03.02 Program Design - Tank Wars.html#the-final-program",
    "href": "03.02 Program Design - Tank Wars.html#the-final-program",
    "title": "5  Tank Wars: An Extended Example",
    "section": "5.3 The Final Program",
    "text": "5.3 The Final Program\nAdding a few display statements, and an if-statement to determine what message to print, we have a complete program. Notice that the functions and variables are named in such a way that the final program looks a lot like the recipe.\n\nwind_speed=5\n\nprint('The wind speed is ',wind_speed)\n\nno_one_has_won=True\n\nwhile no_one_has_won:\n\n    angle1,speed1=get_angle_and_speed(1)\n    angle2,speed2=get_angle_and_speed(2)\n\n    distance1=get_shot_distance(angle1,speed1,wind_speed)\n    distance2=get_shot_distance(angle2,speed2,-wind_speed)\n\n    print('Player 1 Shot a Distance of ',distance1)\n    print('Player 2 Shot a Distance of ',distance2)\n\n    winning_player=get_winning_player(distance1,distance2)\n\n    if (winning_player>0):\n        no_one_has_won=False\n\nif winning_player==1:\n    print('Player 1 Won!')\nelif winning_player==2:\n    print('Player 2 Won!')\nelse:\n    print('Stalemate.')\n\nThe wind speed is  5\nPlayer  1\n\n\nEnter your Angle of Elevation:  45\nEnter your Angle of Speed:  40\n\n\nPlayer  2\n\n\nEnter your Angle of Elevation:  30\nEnter your Angle of Speed:  100\n\n\nPlayer 1 Shot a Distance of  188.2842712474619\nPlayer 2 Shot a Distance of  816.0254037844386\nPlayer  1\n\n\nEnter your Angle of Elevation:  45\nEnter your Angle of Speed:  150\n\n\nPlayer  2\n\n\nEnter your Angle of Elevation:  30\nEnter your Angle of Speed:  210\n\n\nPlayer 1 Shot a Distance of  2356.0660171779823\nPlayer 2 Shot a Distance of  3714.1720306893744\nPlayer  1\n\n\nEnter your Angle of Elevation:  45\nEnter your Angle of Speed:  110\n\n\nPlayer  2\n\n\nEnter your Angle of Elevation:  30\nEnter your Angle of Speed:  50\n\n\nPlayer 1 Shot a Distance of  1287.7817459305202\nPlayer 2 Shot a Distance of  191.50635094610965\nPlayer  1\n\n\nEnter your Angle of Elevation:  45\nEnter your Angle of Speed:  97\n\n\nPlayer  2\n\n\nEnter your Angle of Elevation:  30\nEnter your Angle of Speed:  115\n\n\nPlayer 1 Shot a Distance of  1009.4893577750951\nPlayer 2 Shot a Distance of  1087.8185965049202\nPlayer 1 Won!\n\n\n\n\n\n\n\n\nExercise\n\n\n\nCreate the following computer game: The computer randomly selects an integer between 1 and 100. The user has to guess the number in the fewest number of tries. After each guess, the computer tells you whether the guess is too high or too low. At the end of the game print out the number of guesses it took. After each game, the user has the option of continuing with another game. Make sure to write a recipe for the program before you write any Python code, and include it with your program.\n\n\n\n\n\n\n\n\nExercise\n\n\n\nMake the same game, but this time have the human pick the number, and the computer guesses. The computer should need no more than 8 guesses to win."
  },
  {
    "objectID": "04.01 Program Structure - Part II.html",
    "href": "04.01 Program Structure - Part II.html",
    "title": "Program Structure - Part II",
    "section": "",
    "text": "Up until this point, everything we have presented is true for practically any programming language. They all have a branching structure, and a looping structure. They all deal with boolean variables, and have some form of function or subroutine structure to break up problems into smaller pieces. Now we add lists and dictionaries to the mix, and really add a lot of power to our programs."
  },
  {
    "objectID": "04.01 Program Structure - Part II.html#lists",
    "href": "04.01 Program Structure - Part II.html#lists",
    "title": "Program Structure - Part II",
    "section": "Lists",
    "text": "Lists\nPython supports lists as a basic data structure. For example, you can do\n\na=[-4,4,10,-2,20]\nprint(a)\n\n[-4, 4, 10, -2, 20]\n\n\n\na[3]\n\n-2\n\n\n\na[0]\n\n-4\n\n\n\na[5]\n\nIndexError: list index out of range\n\n\nNotice that you can access the elements of a list like a[2], and that the elements are numbered starting with 0, not 1. If you try to access beyond the length of a list, then an error results.\nWhen using the multiply operator, *, the list gets duplicated. For example,\n\na=[1]*5\nprint(a)\n\n[1, 1, 1, 1, 1]\n\n\nThe length of a list is given by the function len. This lets you cycle through the values of a list easily.\n\na=[-4,4,10,-2,20]\nfor i in range(len(a)):\n    if a[i]>0:\n        print(\"The element number \",i,\" is greater than zero\")\n\nThe element number  1  is greater than zero\nThe element number  2  is greater than zero\nThe element number  4  is greater than zero\n\n\nThe for-loop can more easily be used to loop through the values of the list, rather than looping through the index numbers,\n\na=[-4,4,10,-2,20]\nfor value in a:\n    if value>0:\n        print(\"The value \",value,\" is greater than zero\")\n\nThe value  4  is greater than zero\nThe value  10  is greater than zero\nThe value  20  is greater than zero\n\n\n\nA Warning about Copying Lists\nIn the way that Python works, if you do:\n\na=[1,2,3,4,5]\nb=a\n\nThen b is not a copy of a, but the same list as a. Modifying b also modifies a, for example\n\na\n\n[1, 2, 3, 4, 5]\n\n\n\nb\n\n[1, 2, 3, 4, 5]\n\n\n\nb[2]=100\n\n\nb\n\n[1, 2, 100, 4, 5]\n\n\n\na\n\n[1, 2, 100, 4, 5]\n\n\nTo avoid this, do the following\n\na=[1,2,3,4,5]\n\n\nb=a[:]  # make a copy of a\n\n\na\n\n[1, 2, 3, 4, 5]\n\n\n\nb\n\n[1, 2, 3, 4, 5]\n\n\n\nb[2]=100\n\n\na\n\n[1, 2, 3, 4, 5]\n\n\n\nb\n\n[1, 2, 100, 4, 5]"
  },
  {
    "objectID": "04.02 Extended Tank Wars.html",
    "href": "04.02 Extended Tank Wars.html",
    "title": "6  Extended Example: Tank Wars with N Players",
    "section": "",
    "text": "Get Number of Players\nGet The Tank Positions\nWhile No One Has Won\n\nSet Wind Speed\nDisplay The Tank Positions and Wind Speed\nFor Each Surviving Player…\n\nGet Their Angle and Speed\nGet Where Each Shot Landed\n\nDisplay Where Each Shot Landed\nDetermine Who Has Been Destroyed, If Anyone\nDetermine Who Has Won, If Anyone\n\nDisplay Who Won\n\nAlmost all of the structure will be the same as the 2 player game. To get the number of players, we can use the same structure as we used before for getting values typed in by the user\n\ndef get_number_of_players():\n    N=int(input('How many players? '))\n\n    if N<=1:\n        raise ValueError('Illegal number of players')\n\n    return N\n\nTo get the tank positions, we choose random numbers from 0 to 1000. We need N of them, so we want to make a list of length N (using the * operator), and then filling in the values using random() to make a random values containing values from 0 to 1. We can then multiply by 1000 to get the positions.\n\ndef get_tank_positions(N):\n    from random import random\n    \n    pos=[0]*N   # make a list of length N, with zeros\n\n    # fill in all the values with random numbers\n    for i in range(N):\n        pos[i]=random()*1000.0\n\n    return pos\n\n\nget_tank_positions(5)\n\n[240.52428858079767,\n 630.8041880180731,\n 2.4348094222302885,\n 765.4091453651428,\n 190.33972370290886]\n\n\nNext we must write out how we do For Each Surviving Player. Somehow we need to keep track of which players are dead, and only ask for input from non-dead players. To do this, let’s make another list, called isdead, which is False for all alive players and True for all dead players. Then\n\nWhile No One Has Won\n\nSet Wind Speed\nDisplay The Tank Positions and Wind Speed\nFor Each Surviving Player…\n\nGet Their Angle and Speed\nGet Where Each Shot Landed\n\nDisplay Where Each Shot Landed\nDetermine Who Has Been Destroyed, If Anyone\nDetermine Who Has Won, If Anyone\n\nDisplay Who Won\n\nChanges to\n\nInitialize isdead List to all Zeros\nWhile No One Has Won\n\nSet Wind Speed\nDisplay The Tank Positions and Wind Speed\nFor Each Player…\n\nIf the Player is Not Dead…\n\nGet Their Angle and Speed\n\nGet Where Each Shot Landed\n\nDisplay Where Each Shot Landed\nDetermine Who Has Been Destroyed, If Anyone\nFor all of those destroyed, set isdead to True\nDetermine Who Has Won, If Anyone\n\nDisplay Who Won\n\nThe statement Get Where Each Shot Landed in this case will be translated to Make a List of Positions of Where Each Player’s Shot Landed. This is the sum of the previously written function get_shot_distance and the current tank position. The inner-most loop now becomes\nfor player in range(N):\n            \n    # get all of the angles and speeds\n\n    if not isdead[player]:\n        [angle,speed]=get_angle_and_speed(player)\n\n        distance=get_shot_distance(angle,speed,wind_speed)\n\n        # make a list with all of the places the shots landed\n        shot_pos[player]=tank_pos[player]+distance\nWe have to update the get_angle_and_speed function to accept angles from 0 to 180, instead of from 0 to 90, so the tanks can fire both to the right and to the left. In that function\nif (angle<0) or (angle>90): # illegal angles\nbecomes\nif (angle<0) or (angle>180): # illegal angles\nTo Determine Who Has Been Destroyed, If Anyone, we must go through all players (the same type of loop), and check to see if any of the shots were within range. We should make a function, called isdestroyed, to return True if the tank is destroyed. What information does this function need? It certainly needs to know which tank we are testing to see if it is destroyed, the positions of the tanks, the positions of the shots, and which tanks are dead. Thus, it’s syntax should be something like isdestroyed(player,tank_pos,shot_pos,isdead). A dead tank should return False.\n\ndef isdestroyed(current_player,tank_pos,shot_pos,isdead):\n\n    if isdead[current_player]:\n        return False # a dead one cannot be destroyed\n\n    N=len(tank_pos)\n\n    for player in range(N):  # players numbered from 0 to N-1\n        if not isdead[player]:  # did the player's shot hit the current player?\n            if abs(shot_pos[player]-tank_pos[current_player])<10: # a hit\n                return True\n\n\n    # if you've gotten this far past the loop, then you're not destroyed\n\n    return False\n\nNotice how we obtained the value for N in the function. Since we can’t use N without assigning it a value, we could have passed the value of N as a parameter. Instead (just to make one less parameter) we determined N from the properties of the other parameters, namely the length of the tank position list. This saves us one more parameter to pass, and makes the code a bit cleaner.\nTo print out the tank positions, what we need to do is to go through all of the players, print one message for the ones which are dead (isdead(player)), and another for those that are still surviving.\n\ndef print_tank_positions(pos,isdead):\n    N=len(pos)\n\n    for player in range(N):\n        if isdead[player]:\n            print('Player ',player,' is dead.')\n        else:\n            print('Player ',player,' is at position ',pos[player],'.')\n\n\nA very similar function for printing the shot positions, except we don’t have to write anything for those dead tanks, only the ones that are not dead.\n\ndef print_shot_positions(pos,isdead):\n\n    N=len(pos)\n\n    for player in range(N):\n        if not isdead[player]:\n            print('Shot for player ',player,' landed at position ',pos[player],'.')\n\nHow do we determine if there is a winner? Logically, it means that there is only one survivor. How do we determine this from the variables we have? If we could count the number of True values in the isdead list, that would be the number of tanks killed. N minus this number is the number of survivors. We may want to also keep track of which tank is alive, if any.\n# find out who has been destroyed\ndead_count=0\nlast_alive=-1  # keep track of a live one\nfor player in range(N):\n    if isdestroyed(player,tank_pos,shot_pos,isdead):\n        print 'Player ',player,' has been destroyed.'\n        isdead[player]=True\n\n    if isdead[player]:\n        dead_count=dead_count+1\n    else:\n        last_alive=player\n\nnumber_alive=N-dead_count\n\nif number_alive<2:\n    no_one_has_won=False  # break out of loop\nFinally, we have all of the pieces together, and the complete program is\n\nimport math\nimport random\n\ndef get_number_of_players():\n    N=int(input('How many players? '))\n  \n    if N<=1:\n        raise ValueError('Illegal number of players')\n\n    return N\n\ndef get_tank_positions(N):\n\n    pos=[0]*N   # make a list of length N, with zeros\n    \n    # fill in all the values with random numbers\n    for i in range(N):\n        pos[i]=random.random()*1000.0\n\n    return pos\n\ndef isdestroyed(current_player,tank_pos,shot_pos,isdead):\n  \n    if isdead[current_player]:\n        return False # a dead one cannot be destroyed\n  \n    N=len(tank_pos)\n    \n    for player in range(N):  # players numbered from 0 to N-1\n        if not isdead[player]:  # did the player's shot hit the current player?\n            if abs(shot_pos[player]-tank_pos[current_player])<10: # a hit\n                return True\n\n            \n    # if you've gotten this far past the loop, then you're not destroyed\n    \n    return False\n\ndef print_shot_positions(pos,isdead):\n    \n    N=len(pos)\n    \n    for player in range(N):\n        if not isdead[player]:\n            print('Shot for player ',player,' landed at position ',pos[player],'.')\n    \ndef print_tank_positions(pos,isdead):\n    N=len(pos)\n    \n    for player in range(N):\n        if isdead[player]:\n            print('Player ',player,' is dead.')\n        else:\n            print('Player ',player,' is at position ',pos[player],'.')\n            \ndef get_angle_and_speed(player_number):\n\n    print('Player ',player_number)\n    angle=float(input('  Enter your Angle of Elevation: '))\n    \n    if (angle<0) or (angle>90): # illegal angles\n        raise ValueError(\"Illegal Angle Given\")\n\n    speed=float(input('  Enter your Angle of Speed: '))\n    \n    if speed<0:\n        raise ValueError(\"Illegal Speed Given\")\n        \n    \n    return angle,speed\n\n\ndef radians(d):\n    r=d*3.1415926535897932/180\n    return r\n\ndef get_shot_distance(angle,shot_speed,wind_speed):\n\n    angle=radians(angle)\n    distance=(shot_speed**2*math.sin(2.0*angle)+\n              2.0*wind_speed*shot_speed*math.sin(angle))/10.0;\n\n\n    return distance\n\n\nN=get_number_of_players()\n  \ntank_pos=get_tank_positions(N)\n  \n# no one starts out dead (0 is the same as false)\nisdead=[False]*N\n  \n# shot positions start off as zero\nshot_pos=[0]*N\n  \nno_one_has_won=True\nwhile no_one_has_won:\n    \n    wind_speed=(random.random()*20)-10;  #random speed from -10 to 10\n    print('The wind speed is ',wind_speed)\n    print_tank_positions(tank_pos,isdead)\n    \n    for player in range(N):\n        \n        # get all of the angles and speeds\n      \n        if not isdead[player]:\n            [angle,speed]=get_angle_and_speed(player)\n        \n            distance=get_shot_distance(angle,speed,wind_speed)\n        \n            # make a vector with all of the places the shots landed\n            shot_pos[player]=tank_pos[player]+distance\n    \n    print_shot_positions(shot_pos,isdead)\n    \n    # find out who has been destroyed\n    dead_count=0\n    last_alive=-1\n    for player in range(N):\n        if isdestroyed(player,tank_pos,shot_pos,isdead):\n            print('Player ',player,' has been destroyed.')\n            isdead[player]=True\n      \n        if isdead[player]:\n            dead_count=dead_count+1\n        else:\n            last_alive=player\n            \n    number_alive=N-dead_count\n    \n    if number_alive<2:\n        no_one_has_won=False  # break out of loop\n\n        \n        \nif number_alive==0:\n    print('Everyone is dead. Stalemate.')\nelse:\n    print('Player ',last_alive,' has won!')\n  \n\nHow many players?  4\n\n\nThe wind speed is  6.122720147656025\nPlayer  0  is at position  270.6115729329859 .\nPlayer  1  is at position  567.5833139916356 .\nPlayer  2  is at position  789.4168628349934 .\nPlayer  3  is at position  922.3453822126986 .\nPlayer  0\n\n\n  Enter your Angle of Elevation:  35\n  Enter your Angle of Speed:  25\n\n\nPlayer  1\n\n\n  Enter your Angle of Elevation:  50\n  Enter your Angle of Speed:  100\n\n\nPlayer  2\n\n\n  Enter your Angle of Elevation:  45\n  Enter your Angle of Speed:  35\n\n\nPlayer  3\n\n\n  Enter your Angle of Elevation:  67\n  Enter your Angle of Speed:  100\n\n\nShot for player  0  landed at position  346.90160174744165 .\nShot for player  1  landed at position  1646.1965819215338 .\nShot for player  2  landed at position  942.2227813849988 .\nShot for player  3  landed at position  1754.4050547963184 .\nThe wind speed is  3.9105044511135567\nPlayer  0  is at position  270.6115729329859 .\nPlayer  1  is at position  567.5833139916356 .\nPlayer  2  is at position  789.4168628349934 .\nPlayer  3  is at position  922.3453822126986 .\nPlayer  0\n\n\n  Enter your Angle of Elevation:  \n\n\nValueError: could not convert string to float: ''"
  },
  {
    "objectID": "04.03 Program Structure - Maze.html",
    "href": "04.03 Program Structure - Maze.html",
    "title": "7  Extended Example: Maze",
    "section": "",
    "text": "Start with a maze grid with all walls up (a bunch of individual, walled cells). Pick a point, and move to a neighboring cell at random. If the new cell has all of its walls still up, then knock the walls down between the previous cell and the new cell. Keep moving to neighboring cells until all cells have been visited.\n\nWe will start with the recipe, and then break each piece down into pieces.\n\nMake Maze\nDraw Maze\n\nthen we expand those pieces\n\nMake Maze\n\nInitialize Maze\nPick a point\nMove to a neighboring cell at random\nIf the new cell has all of its walls still up…\n\nKnock the walls down between the previous cell and the new cell\n\nKeep moving to neighboring cells until all cells have been visited. → this turns into a while loop\n\nDraw Maze\n\nFor all of the rows…\n\nDraw one row of the maze\n\n\n\nthen we structure the while-loop\n\nMake Maze\n\nInitialize Maze\nPick a cell\nCount this cell as visited\nWhile we still have cells to visit…\n\nMove to a neighboring cell at random\nIf the new cell has all of its walls still up…\n\nKnock the walls down between the previous cell and the new cell - Count this new cell as visited\n\nDraw Maze\n\nFor all of the rows…\n\nDraw one row of the maze\n\n\n\nAt this point we have to make some decisions about how to represent the maze itself. Pretty much we need to have a number of rows and columns for the maze, and know which walls are up for the particular cell. For example, say we have the following 3x3 maze, and a summary of the information to describe this maze:\n                   +--+--+--+\n                   |        |\n                   +--+  +--+\n                   |        |\n                   +--+  +  +\n                   |     |  |\n                   +--+--+--+\nThe information in this maze is the following (recall that Python lists index starting from 0 not 1, so rows and columns are numbered from 0):\n\n\n\nIndex\nRow\nColumn\nN\nE\nW\nS\n\n\n\n\n0\n0\n0\ny\nn\ny\ny\n\n\n1\n1\n0\ny\nn\ny\ny\n\n\n2\n2\n0\ny\nn\ny\ny\n\n\n3\n0\n1\ny\nn\nn\nn\n\n\n4\n1\n1\nn\nn\nn\nn\n\n\n5\n2\n1\nn\ny\nn\ny\n\n\n6\n0\n2\ny\ny\nn\ny\n\n\n7\n1\n2\ny\ny\nn\nn\n\n\n8\n2\n2\nn\ny\ny\ny\n\n\n\nWe could have 4 separate lists (or lists of lists, to get 2-D structure) representing north, south, east, and west walls, or we can be a bit more clever and do it in one. If we assign the following values:\nM =\n\n  11   8  13\n  11   0  12\n  11   5   7\nHere I have set the following values:\n\\[N=8\\]\n\\[E=4\\]\n\\[W=2\\]\n\\[S=1\\]\nand simply added them up. In that way, all of the possible combinations of walls are specified by a single number from 0 (no walls) to 15 (all walls = 8+4+2+1). We will want a conversion between this number format to a length 4 list specifying the walls in North, East, West, and South directions (I’ll refer to this length-4 list format as the NEWS format). To go from NEWS format to number format we just simply add up the values of \\(N\\), \\(E\\), \\(W\\), and \\(S\\) for every element of the NEWS list which is 1.\n\ndef news2num(NEWS):\n    # convert a north,east,west,south list to a single number wall value\n    North=8; East=4; West=2; South=1; \n\n    num=NEWS[0]*North+NEWS[1]*East+NEWS[2]*West+NEWS[3]*South;\n\n    return num\n\nTo go the other way we can do\n\ndef num2news(num):\n    # convert single number wall values to a north,east,west,south list\n\n    North=8; East=4; West=2; South=1; \n\n    NEWS=[0, 0, 0, 0]\n\n    if (num>=8): # North\n        NEWS[0]=1\n        num=num-8\n\n\n    if (num>=4): # East\n        NEWS[1]=1\n        num=num-4\n\n    if (num>=2): # West\n        NEWS[2]=1\n        num=num-2\n\n    if (num>=1): # South\n        NEWS[3]=1\n        num=num-1\n\n    return NEWS\n\nMore to do here\nThe full source for the maze program is the following:\n\n%matplotlib inline\nfrom mplturtle import *\nimport random\n\ndef num2news(num):\n    # convert single number wall values to a north,east,west,south list\n\n    North=8; East=4; West=2; South=1; \n\n    NEWS=[0, 0, 0, 0]\n\n    if (num>=8): # North\n        NEWS[0]=1\n        num=num-8\n\n        \n    if (num>=4): # East\n        NEWS[1]=1\n        num=num-4\n\n    if (num>=2): # West\n        NEWS[2]=1\n        num=num-2\n        \n    if (num>=1): # South\n        NEWS[3]=1\n        num=num-1\n        \n    return NEWS\n\ndef news2num(NEWS):\n    # convert a north,east,west,south list to a single number wall value\n    North=8; East=4; West=2; South=1; \n      \n    num=NEWS[0]*North+NEWS[1]*East+NEWS[2]*West+NEWS[3]*South;\n      \n    return num\n\ndef idx2rc(idx,M,R,C):\n    # convert from index representation to row and column\n    \n    r=[i%R for i in idx]\n    c=[i//R for i in idx]\n    \n    \n    return r,c\n\ndef rc2idx(rv,cv,M,R,C):\n    #convert from row and column representation to an index\n    \n    idx=[]\n    for r,c in zip(rv,cv):\n        idx.append(r+c*R)\n\n        \n    return idx\n\ndef get_direction(idx1,idx2,M,R,C):\n    # Given two neighboring indices, returns both the direction from first\n    # to the second and the second to the first \n    \n    North=8; East=4; West=2; South=1; \n    \n    r1,c1=idx2rc(idx1,M,R,C)\n    r1=r1[0]\n    c1=c1[0]\n    \n    r2,c2=idx2rc(idx2,M,R,C)\n    r2=r2[0]\n    c2=c2[0]\n    \n    if  ((r1-r2)==0) and ((c1-c2)==1):   # c1 to the right\n        dir1=West \n        dir2=East\n    elif ((r1-r2)==0) and ((c1-c2)==-1): # c1 to the left\n        dir1=East \n        dir2=West\n    elif ((r1-r2)==1) and ((c1-c2)==0):  # r1 below\n        dir1=North\n        dir2=South\n    elif ((r1-r2)==-1) & ((c1-c2)==0):    # r1 above\n        dir1=South \n        dir2=North\n    else:\n        raise ValueError('Invalid neighboring indices')\n  \n    return dir1,dir2\n  \ndef neighbors(idx,M,R,C):\n  \n    # convert the index to row and column\n    r,c=idx2rc(idx,M,R,C)\n    r=r[0]\n    c=c[0]\n\n    \n    # get the neighboring row and column values\n    \n    rd=[v+r for v in [-1,0,0,1]]\n    cd=[v+c for v in [0,1,-1,0]]\n\n    # find the valid ones\n    \n    rdv=[]\n    cdv=[]\n    for i in range(4):\n        if (rd[i]>=0) and (rd[i]<R) and (cd[i]>=0) and (cd[i]<C):\n            rdv.append(rd[i])\n            cdv.append(cd[i])\n            \n    # convert back to an index\n    idx_neighbor=rc2idx(rdv,cdv,M,R,C)\n    \n    return idx_neighbor\n\ndef draw_row(row,sz):\n    NEWS=num2news(row[0])\n\n    #turtle starts in upper left, facing right\n    if NEWS[2]:  #left-most wall\n        right(90)\n        pendown()\n        forward(sz)\n        backward(sz)\n        left(90)\n        penup()\n\n    for v in row:\n        NEWS=num2news(v)\n      \n        # I only care about the east wall and south walls\n        # east\n        penup()\n        forward(sz)\n        \n        if NEWS[1]: # east wall\n            right(90)\n            pendown()\n            forward(sz)\n            backward(sz)\n            left(90)\n            penup()\n        \n        if NEWS[3]: # south wall\n            right(90)\n            forward(sz)\n            right(90)\n            pendown()\n            forward(sz)\n            backward(sz)\n            left(90)\n            penup()\n            backward(sz)\n            left(90)\n\ndef draw_row_text(row):\n# draws one row of the maze\n\n    NEWS=num2news(row[0])\n\n    s=''\n    if NEWS[2]:\n        s=s+ '|' # left-most wall\n    else:\n        s=s+ ' '\n\n    for v in row:\n        NEWS=num2news(v)\n      \n        # I only care about the east wall\n      \n        if NEWS[1]:\n            s=s+ '  |'\n        else:\n            s=s+ '   '\n    print(s)\n    \n    # draw the south walls\n    s='+'\n    for v in row:\n        NEWS=num2news(v)\n    \n        # I only care about the south wall\n      \n        if NEWS[3]:\n            s=s+ '--+'\n        else:\n            s=s+ '  +'\n\n    print(s)\n      \n\ndef M2D(Ml,R,C):\n    \n    # make 2D (all of the rc -> idx is down a column\n    \n    M=[]\n    for r in range(R):\n        M.append([0]*C)\n        \n    # copy\n    count=0\n    for c in range(C):\n        for r in range(R):\n           M[r][c]=Ml[count]\n           count=count+1\n\n    return M\n\ndef draw_maze_text(Ml,R,C):\n    # Draws the maze in text form\n\n\n    M=M2D(Ml,R,C)\n\n    row=M[0]\n\n    # draw the top wall\n    \n    s='+'\n    for v in row:\n        NEWS=num2news(v);\n        if NEWS[0]:\n            s=s+ '--+'\n        else:\n            s=s+ '  +'\n\n    print(s)\n    \n    for row in M:\n        draw_row_text(row)\n\ndef draw_maze(Ml,R,C):\n    reset()\n    speed(0)\n    #hideturtle()\n    \n    M=M2D(Ml,R,C)    \n    row=M[0]\n    sz=10\n    \n    penup()\n    x,y=-C*sz/2,R*sz/2\n    goto(x,y)\n    # draw the top wall\n    for v in row:\n        NEWS=num2news(v);\n        if NEWS[0]:\n            pendown()\n            forward(sz)\n        else:\n            penup()\n            forward(sz)\n\n    penup()    \n    goto(x,y)\n    for row in M:\n        draw_row(row,sz)\n        y-=sz\n        penup()    \n        goto(x,y)\n\ndef maze(R=20,C=-1):\n    #Aldous-Broder's algorithm\n    \n    #  Pick a point, and move to a neighboring cell at random. If an\n    #  uncarved cell is entered, carve into it from the previous cell. Keep\n    #  moving to neighboring cells until all cells have been carved into.\n\n    if C<0:  # default value\n        C=R\n        \n    \n    M=[15]*(R*C)  # all walls up\n    \n    \n    \n    count=1\n  \n    # Pick a point...\n    idx=random.choice(range(R*C))\n\n    \n    # Keep moving to neighboring cells until all cells have been carved into. \n    while count<(R*C):\n    \n        #...and move to a neighboring cell at random.\n        idx_neighbors=neighbors([idx],M,R,C)\n        idx_new=random.choice(idx_neighbors)\n    \n        \n        # If an uncarved cell is entered...\n        if M[idx_new]==15: # uncarved\n            # ...carve into it from the previous cell.\n            dir1,dir2=get_direction([idx],[idx_new],M,R,C)\n            M[idx]=M[idx]-dir1\n            M[idx_new]=M[idx_new]-dir2\n          \n            count=count+1\n    \n        idx=idx_new\n    \n        \n    return M\n\n\n\nR=30\nC=30\nM=maze(R,C)\n\nM[R-1]-=1  # entrance\nM[-R]-=8   # exit\ndraw_maze_text(M,R,C)\n\n\n+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+  +\n|        |        |        |  |        |        |              |     |     |        |     |\n+--+--+  +--+  +  +--+  +--+  +  +  +  +  +  +  +--+--+  +--+  +  +--+--+  +--+  +  +  +  +\n|              |  |     |        |  |  |  |  |  |     |  |           |        |  |  |  |  |\n+  +--+--+--+  +--+  +  +--+--+  +--+  +--+  +  +--+  +--+--+  +--+--+--+--+  +  +  +  +--+\n|     |        |  |  |           |  |     |  |              |                    |     |  |\n+  +--+  +--+--+  +  +  +--+--+--+  +  +  +  +  +--+  +--+--+  +--+--+  +--+  +--+  +--+  +\n|     |  |  |     |  |  |              |     |     |  |     |     |  |  |  |     |  |     |\n+  +  +--+  +  +  +  +  +  +--+--+  +--+  +--+--+--+  +  +--+--+--+  +--+  +--+--+  +  +--+\n|  |     |     |     |  |        |  |        |     |                 |                    |\n+  +--+  +--+  +--+--+  +--+--+--+--+  +  +--+--+  +--+  +--+  +--+  +--+--+--+  +  +--+--+\n|  |  |  |           |     |  |  |     |  |     |  |        |  |     |           |  |     |\n+  +  +  +  +--+--+  +--+  +  +  +  +--+--+--+  +  +--+--+--+  +--+--+--+--+--+--+  +  +  +\n|     |  |        |  |        |        |           |     |  |        |  |              |  |\n+  +--+--+--+--+--+  +--+--+  +--+--+  +--+  +--+  +  +--+  +  +  +  +  +  +--+  +--+--+--+\n|        |  |     |  |  |  |     |  |        |  |     |  |  |  |  |     |     |        |  |\n+--+--+  +  +--+  +  +  +  +  +--+  +  +  +  +  +  +  +  +  +--+--+  +--+--+  +--+--+--+  +\n|        |        |     |  |  |     |  |  |  |  |  |        |              |        |     |\n+  +--+--+--+  +--+--+--+  +--+  +  +--+--+  +  +  +--+--+  +  +--+--+  +  +--+  +--+--+  +\n|  |     |  |  |  |              |  |  |        |        |  |  |  |     |  |           |  |\n+  +  +--+  +  +  +  +  +--+--+--+--+  +  +--+--+  +--+--+--+--+  +  +--+--+--+  +--+--+  +\n|              |     |  |     |        |     |  |  |  |        |        |        |        |\n+  +--+--+--+--+--+  +  +  +  +--+--+  +--+--+  +  +  +  +  +  +  +  +  +  +  +--+--+--+  +\n|     |        |  |  |  |  |     |     |  |        |  |  |  |     |  |  |  |        |     |\n+  +--+  +  +--+  +--+  +--+--+  +  +  +  +  +--+--+  +--+--+  +--+  +--+--+--+  +--+  +--+\n|  |     |     |              |     |     |  |              |  |  |  |  |                 |\n+  +--+--+  +--+  +--+--+  +--+  +--+--+  +  +--+--+  +  +--+  +  +  +  +--+--+--+  +--+  +\n|  |     |              |     |        |  |        |  |        |  |        |           |  |\n+  +--+  +--+--+  +--+--+--+--+  +--+--+  +--+  +  +--+  +--+  +  +  +--+--+  +  +  +--+--+\n|  |        |        |              |  |  |     |  |        |  |     |        |  |        |\n+  +--+--+  +--+  +--+  +--+--+--+--+  +  +  +  +  +  +--+  +--+  +--+--+  +  +--+--+--+  +\n|     |           |        |  |           |  |  |  |  |  |     |     |     |  |           |\n+  +--+--+  +  +  +  +--+--+  +  +--+--+--+  +--+  +  +  +--+  +--+  +--+  +--+--+--+--+  +\n|     |     |  |        |  |     |     |        |  |  |  |        |     |     |  |     |  |\n+  +  +  +--+--+  +  +--+  +  +--+  +  +--+  +--+--+  +  +--+--+--+--+--+  +--+  +--+  +--+\n|  |     |  |  |  |  |  |        |  |     |        |  |           |                       |\n+--+  +  +  +  +  +--+  +--+  +  +  +  +  +--+  +--+--+--+--+--+  +--+--+--+  +  +--+--+  +\n|  |  |  |     |  |        |  |  |  |  |  |           |     |  |  |           |        |  |\n+  +  +  +  +--+--+--+  +--+  +--+--+--+  +--+  +  +--+  +--+  +  +--+--+--+--+  +  +--+  +\n|     |  |        |              |  |  |        |     |     |                    |     |  |\n+  +--+--+--+--+  +  +--+--+--+  +  +  +--+--+--+--+  +  +--+--+--+--+  +  +--+--+  +--+  +\n|           |        |                 |     |  |  |           |  |     |     |  |     |  |\n+--+--+  +--+  +  +--+--+--+  +--+  +--+  +  +  +  +  +--+--+--+  +  +--+--+  +  +  +--+--+\n|  |        |  |  |        |  |  |     |  |     |                          |  |  |        |\n+  +--+--+  +  +--+--+--+  +  +  +--+--+--+  +--+--+  +--+--+  +  +  +  +  +--+  +--+--+--+\n|           |  |        |  |     |  |  |     |        |        |  |  |  |     |     |  |  |\n+--+  +  +  +--+  +  +--+  +--+  +  +  +--+  +  +--+--+  +  +  +  +--+  +--+  +  +--+  +  +\n|  |  |  |     |  |                    |        |  |     |  |  |     |     |  |           |\n+  +  +--+  +  +--+  +--+--+  +  +  +--+  +--+--+  +--+--+--+--+--+--+--+--+  +  +--+  +--+\n|        |  |     |  |     |  |  |  |        |           |  |  |     |              |     |\n+  +--+--+  +--+--+--+  +--+--+  +--+--+--+  +  +--+  +--+  +  +  +  +--+  +--+  +--+  +--+\n|  |  |  |  |  |  |  |        |     |              |           |  |  |     |        |     |\n+--+  +  +  +  +  +  +--+  +--+--+--+  +--+  +  +--+--+--+--+  +  +--+--+--+--+  +--+  +  +\n|     |     |  |  |  |              |     |  |     |        |     |  |        |     |  |  |\n+  +  +--+  +  +  +  +--+  +--+  +--+--+  +--+--+--+--+  +--+  +--+  +  +--+--+--+  +--+--+\n|  |           |  |     |  |                    |  |  |  |        |  |           |        |\n+  +--+  +  +  +  +--+  +--+  +  +--+--+--+  +  +  +  +  +--+--+  +  +  +  +--+--+--+--+--+\n|  |     |  |     |  |        |        |     |                 |     |  |  |     |  |     |\n+  +--+  +--+  +  +  +  +--+--+--+  +--+  +--+--+  +--+  +--+--+--+  +--+  +  +--+  +--+  +\n|  |        |  |        |              |  |           |        |                          |\n+  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\n\n\ndraw_maze(M,R,C)"
  },
  {
    "objectID": "05 More Features of Python.html",
    "href": "05 More Features of Python.html",
    "title": "More Features of Python",
    "section": "",
    "text": "Strings refer to strings of characters, like\n\na='hello there'\n\nb=\"both types of quotes work\"\n\nc=a+b\n\nprint(c)\n\nhello thereboth types of quotes work"
  },
  {
    "objectID": "05 More Features of Python.html#file-inputoutput",
    "href": "05 More Features of Python.html#file-inputoutput",
    "title": "More Features of Python",
    "section": "File Input/Output",
    "text": "File Input/Output"
  },
  {
    "objectID": "05 More Features of Python.html#tid-bits",
    "href": "05 More Features of Python.html#tid-bits",
    "title": "More Features of Python",
    "section": "Tid-bits",
    "text": "Tid-bits\nIn this section I am placing a number of useful techniques which don’t fall easily into any other categories.\n\nSwapping Two Values\nIf I want to swap the values of two variables, it is easiest done by the one-liner\n\na=4 \nb=5\nprint(\"a=\",a)\nprint(\"b=\",b)\n\na,b=b,a\n\nprint(\"a=\",a)\nprint(\"b=\",b)\n\na= 4\nb= 5\na= 5\nb= 4\n\n\n\n\nLooping through List Elements\nOne is often in the position of having to go through all of the elements of a list, to find the maximum or minimum, or perhaps a certain value. The straightforward way of doing it is a for-loop.\n\ndef find3(l):\n    # find all of the elements that are equal to 3\n    idx=[];  # start the index list equal to empty\n    for i in range(len(l)):\n        \n        if l[i]==3:\n            idx.append(i) # tack on the value i to the index vector\n\n    return idx\n\nused like\n\nl=[1,3,6,2,5,7,3,5]\nfind3(l)\n\n[1, 6]\n\n\nRemember that indices start with 0!\n\n\nSorting\nThere are a number of ways of sorting a list of numbers. Some algorithms are very quick, but are more abstract to implement. A common algorithm which is not particularly fast, but is very easy to remember, is called the bubble sort. To sort in decreasing order, the bubble sort looks like:\nThe code would look like\n\ndef sortit(x):\n    # bubble sort\n    y=x[:]  # make a copy of the list\n    N=len(y)\n    \n    swapped=True\n    while swapped:\n        swapped=False\n\n        for i in range(N-1):\n            if y[i]>y[i+1]:\n                y[i],y[i+1]=y[i+1],y[i]  # swap\n                swapped=True\n\n    return y\n\nand run like\n\nl=[1,3,6,2,5,7,3,5]\nm=sortit(l)\nm\n\n[1, 2, 3, 3, 5, 5, 6, 7]\n\n\nOf course, there is already a function called sort which does just that.\n\nm=l[:]  # copy the list\nm.sort()\nm\n\n[1, 2, 3, 3, 5, 5, 6, 7]"
  }
]